// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5HTJZVUfUvhyzonuMvwKjB
// Component: X0zTGWEUJFt-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { useScreenVariants as useScreenVariantsgIfArNHgHtxp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GIfArNHgHTXP/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5HTJZVUfUvhyzonuMvwKjB/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: X0zTGWEUJFt-/css

import Ellipse1463Icon from "./icons/PlasmicIcon__Ellipse1463"; // plasmic-import: 3YTNc3fQnFCB/icon
import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: LdBrEYpXLdoc/icon
import ArrowLeftIcon from "./icons/PlasmicIcon__ArrowLeft"; // plasmic-import: _xJw9Zqs1igI/icon
import Ellipse158Icon from "./icons/PlasmicIcon__Ellipse158"; // plasmic-import: KbhprIida7x7/icon
import ProgressBarIcon from "./icons/PlasmicIcon__ProgressBar"; // plasmic-import: q8UKbuysTWvL/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  signInUp?: Flex__<"div">;
  signup1?: Flex__<"div">;
  backgroundImage?: Flex__<"div">;
  backgroundImage2?: Flex__<"div">;
  layer1Image?: Flex__<"div">;
  layer1Image2?: Flex__<"div">;
  layer5Image?: Flex__<"div">;
  layer5Image2?: Flex__<"div">;
  layer6Image?: Flex__<"div">;
  layer6Image2?: Flex__<"div">;
  layer2Image?: Flex__<"div">;
  layer2Image2?: Flex__<"div">;
  layer15Image?: Flex__<"div">;
  layer15Image2?: Flex__<"div">;
  layer3Image?: Flex__<"div">;
  layer3Image2?: Flex__<"div">;
  layer8Image?: Flex__<"div">;
  layer8Image2?: Flex__<"div">;
  layer16Layer1CopyImage?: Flex__<"div">;
  layer16Layer1CopyImage2?: Flex__<"div">;
  layer10Image?: Flex__<"div">;
  layer10Image2?: Flex__<"div">;
  layer12Image?: Flex__<"div">;
  layer12Image2?: Flex__<"div">;
  layer17Image?: Flex__<"div">;
  layer17Image2?: Flex__<"div">;
  layer18Image?: Flex__<"div">;
  layer18Image2?: Flex__<"div">;
  layer9Image?: Flex__<"div">;
  layer9Image2?: Flex__<"div">;
  layer19Image?: Flex__<"div">;
  layer19Image2?: Flex__<"div">;
  frame1000002995?: Flex__<"div">;
  vuesaxOutlineArrowDown?: Flex__<"div">;
  vuesaxOutlineArrowDown2?: Flex__<"div">;
  frame1000003191?: Flex__<"div">;
  frame1000002994?: Flex__<"div">;
  frame2608529?: Flex__<"div">;
  frame2608540?: Flex__<"div">;
  frame2608525?: Flex__<"div">;
  frame2608526?: Flex__<"div">;
  frame2608522?: Flex__<"div">;
  vuesaxOutlineArrowLeft?: Flex__<"div">;
  vuesaxOutlineArrowLeft2?: Flex__<"div">;
  frame2608520?: Flex__<"div">;
  نوجهان1?: Flex__<"div">;
  frame2608517?: Flex__<"div">;
  component11?: Flex__<"div">;
  textField?: Flex__<"div">;
  stateLayer?: Flex__<"div">;
  content?: Flex__<"div">;
  labelText?: Flex__<"div">;
  labelText2?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  content2?: Flex__<"div">;
  labelText3?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  content3?: Flex__<"div">;
  frame2608539?: Flex__<"div">;
  content4?: Flex__<"div">;
  labelText4?: Flex__<"div">;
  frame2608528?: Flex__<"div">;
  labelText5?: Flex__<"div">;
  frame2608516?: Flex__<"div">;
  component12?: Flex__<"div">;
  stateLayer2?: Flex__<"div">;
  content5?: Flex__<"div">;
  labelText6?: Flex__<"div">;
  labelText7?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgIfArNHgHtxp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"signInUp"}
              data-plasmic-override={overrides.signInUp}
              className={classNames(projectcss.all, sty.signInUp)}
            >
              <div
                data-plasmic-name={"signup1"}
                data-plasmic-override={overrides.signup1}
                className={classNames(projectcss.all, sty.signup1)}
              >
                <div
                  data-plasmic-name={"backgroundImage"}
                  data-plasmic-override={overrides.backgroundImage}
                  className={classNames(projectcss.all, sty.backgroundImage)}
                >
                  <div
                    data-plasmic-name={"backgroundImage2"}
                    data-plasmic-override={overrides.backgroundImage2}
                    className={classNames(projectcss.all, sty.backgroundImage2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer1Image"}
                  data-plasmic-override={overrides.layer1Image}
                  className={classNames(projectcss.all, sty.layer1Image)}
                >
                  <div
                    data-plasmic-name={"layer1Image2"}
                    data-plasmic-override={overrides.layer1Image2}
                    className={classNames(projectcss.all, sty.layer1Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer5Image"}
                  data-plasmic-override={overrides.layer5Image}
                  className={classNames(projectcss.all, sty.layer5Image)}
                >
                  <div
                    data-plasmic-name={"layer5Image2"}
                    data-plasmic-override={overrides.layer5Image2}
                    className={classNames(projectcss.all, sty.layer5Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer6Image"}
                  data-plasmic-override={overrides.layer6Image}
                  className={classNames(projectcss.all, sty.layer6Image)}
                >
                  <div
                    data-plasmic-name={"layer6Image2"}
                    data-plasmic-override={overrides.layer6Image2}
                    className={classNames(projectcss.all, sty.layer6Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer2Image"}
                  data-plasmic-override={overrides.layer2Image}
                  className={classNames(projectcss.all, sty.layer2Image)}
                >
                  <div
                    data-plasmic-name={"layer2Image2"}
                    data-plasmic-override={overrides.layer2Image2}
                    className={classNames(projectcss.all, sty.layer2Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer15Image"}
                  data-plasmic-override={overrides.layer15Image}
                  className={classNames(projectcss.all, sty.layer15Image)}
                >
                  <div
                    data-plasmic-name={"layer15Image2"}
                    data-plasmic-override={overrides.layer15Image2}
                    className={classNames(projectcss.all, sty.layer15Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer3Image"}
                  data-plasmic-override={overrides.layer3Image}
                  className={classNames(projectcss.all, sty.layer3Image)}
                >
                  <div
                    data-plasmic-name={"layer3Image2"}
                    data-plasmic-override={overrides.layer3Image2}
                    className={classNames(projectcss.all, sty.layer3Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer8Image"}
                  data-plasmic-override={overrides.layer8Image}
                  className={classNames(projectcss.all, sty.layer8Image)}
                >
                  <div
                    data-plasmic-name={"layer8Image2"}
                    data-plasmic-override={overrides.layer8Image2}
                    className={classNames(projectcss.all, sty.layer8Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer16Layer1CopyImage"}
                  data-plasmic-override={overrides.layer16Layer1CopyImage}
                  className={classNames(
                    projectcss.all,
                    sty.layer16Layer1CopyImage
                  )}
                >
                  <div
                    data-plasmic-name={"layer16Layer1CopyImage2"}
                    data-plasmic-override={overrides.layer16Layer1CopyImage2}
                    className={classNames(
                      projectcss.all,
                      sty.layer16Layer1CopyImage2
                    )}
                  />
                </div>
                <div
                  data-plasmic-name={"layer10Image"}
                  data-plasmic-override={overrides.layer10Image}
                  className={classNames(projectcss.all, sty.layer10Image)}
                >
                  <div
                    data-plasmic-name={"layer10Image2"}
                    data-plasmic-override={overrides.layer10Image2}
                    className={classNames(projectcss.all, sty.layer10Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer12Image"}
                  data-plasmic-override={overrides.layer12Image}
                  className={classNames(projectcss.all, sty.layer12Image)}
                >
                  <div
                    data-plasmic-name={"layer12Image2"}
                    data-plasmic-override={overrides.layer12Image2}
                    className={classNames(projectcss.all, sty.layer12Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer17Image"}
                  data-plasmic-override={overrides.layer17Image}
                  className={classNames(projectcss.all, sty.layer17Image)}
                >
                  <div
                    data-plasmic-name={"layer17Image2"}
                    data-plasmic-override={overrides.layer17Image2}
                    className={classNames(projectcss.all, sty.layer17Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer18Image"}
                  data-plasmic-override={overrides.layer18Image}
                  className={classNames(projectcss.all, sty.layer18Image)}
                >
                  <div
                    data-plasmic-name={"layer18Image2"}
                    data-plasmic-override={overrides.layer18Image2}
                    className={classNames(projectcss.all, sty.layer18Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer9Image"}
                  data-plasmic-override={overrides.layer9Image}
                  className={classNames(projectcss.all, sty.layer9Image)}
                >
                  <div
                    data-plasmic-name={"layer9Image2"}
                    data-plasmic-override={overrides.layer9Image2}
                    className={classNames(projectcss.all, sty.layer9Image2)}
                  />
                </div>
                <div
                  data-plasmic-name={"layer19Image"}
                  data-plasmic-override={overrides.layer19Image}
                  className={classNames(projectcss.all, sty.layer19Image)}
                >
                  <div
                    data-plasmic-name={"layer19Image2"}
                    data-plasmic-override={overrides.layer19Image2}
                    className={classNames(projectcss.all, sty.layer19Image2)}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"frame1000002995"}
                data-plasmic-override={overrides.frame1000002995}
                className={classNames(projectcss.all, sty.frame1000002995)}
              >
                <Ellipse1463Icon
                  className={classNames(projectcss.all, sty.svg__pofL2)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"vuesaxOutlineArrowDown"}
                  data-plasmic-override={overrides.vuesaxOutlineArrowDown}
                  className={classNames(
                    projectcss.all,
                    sty.vuesaxOutlineArrowDown
                  )}
                >
                  <div
                    data-plasmic-name={"vuesaxOutlineArrowDown2"}
                    data-plasmic-override={overrides.vuesaxOutlineArrowDown2}
                    className={classNames(
                      projectcss.all,
                      sty.vuesaxOutlineArrowDown2
                    )}
                  >
                    <ArrowDownIcon
                      className={classNames(projectcss.all, sty.svg___3FKzu)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"frame1000003191"}
                data-plasmic-override={overrides.frame1000003191}
                className={classNames(projectcss.all, sty.frame1000003191)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1000002994"}
                  data-plasmic-override={overrides.frame1000002994}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1000002994)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2608529"}
                    data-plasmic-override={overrides.frame2608529}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2608529)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2608540"}
                      data-plasmic-override={overrides.frame2608540}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2608540)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame2608525"}
                        data-plasmic-override={overrides.frame2608525}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame2608525)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame2608526"}
                          data-plasmic-override={overrides.frame2608526}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame2608526
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame2608522"}
                            data-plasmic-override={overrides.frame2608522}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame2608522
                            )}
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"vuesaxOutlineArrowLeft"}
                                data-plasmic-override={
                                  overrides.vuesaxOutlineArrowLeft
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.vuesaxOutlineArrowLeft
                                )}
                              >
                                <div
                                  data-plasmic-name={"vuesaxOutlineArrowLeft2"}
                                  data-plasmic-override={
                                    overrides.vuesaxOutlineArrowLeft2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.vuesaxOutlineArrowLeft2
                                  )}
                                >
                                  <ArrowLeftIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__x2CHk
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            ) : null}
                            <div
                              data-plasmic-name={"frame2608520"}
                              data-plasmic-override={overrides.frame2608520}
                              className={classNames(
                                projectcss.all,
                                sty.frame2608520
                              )}
                            >
                              <Ellipse158Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oTPoO
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={
                                  "\u0646\u0648\u062c\u0647\u0627\u06461"
                                }
                                data-plasmic-override={overrides.نوجهان1}
                                className={classNames(
                                  projectcss.all,
                                  sty.نوجهان1
                                )}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame2608517"}
                            data-plasmic-override={overrides.frame2608517}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame2608517
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__heXq2
                              )}
                            >
                              {
                                "\u0628\u0647 \u0646\u0648\u062c\u0647\u0627\u0646 \u062e\u0648\u0634 \u0627\u0648\u0645\u062f\u06cc!"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mbrZx
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644\u062a \u0631\u0648 \u0627\u06cc\u0646\u062c\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646"
                              }
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <div
                        data-plasmic-name={"component11"}
                        data-plasmic-override={overrides.component11}
                        className={classNames(projectcss.all, sty.component11)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"textField"}
                          data-plasmic-override={overrides.textField}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.textField)}
                        >
                          <div
                            data-plasmic-name={"stateLayer"}
                            data-plasmic-override={overrides.stateLayer}
                            className={classNames(
                              projectcss.all,
                              sty.stateLayer
                            )}
                          >
                            <div
                              data-plasmic-name={"content"}
                              data-plasmic-override={overrides.content}
                              className={classNames(
                                projectcss.all,
                                sty.content
                              )}
                            >
                              <div
                                data-plasmic-name={"labelText"}
                                data-plasmic-override={overrides.labelText}
                                className={classNames(
                                  projectcss.all,
                                  sty.labelText
                                )}
                              >
                                <div
                                  data-plasmic-name={"labelText2"}
                                  data-plasmic-override={overrides.labelText2}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.labelText2
                                  )}
                                >
                                  {
                                    "\u0628\u0631\u0627\u06cc \u0645\u062b\u0627\u0644:09120000000"
                                  }
                                </div>
                              </div>
                            </div>
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"supportingText"}
                          data-plasmic-override={overrides.supportingText}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.supportingText
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"content2"}
                              data-plasmic-override={overrides.content2}
                              className={classNames(
                                projectcss.all,
                                sty.content2
                              )}
                            >
                              <div
                                data-plasmic-name={"labelText3"}
                                data-plasmic-override={overrides.labelText3}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.labelText3
                                )}
                              >
                                {
                                  "\u06a9\u062f\u06cc \u06a9\u0647 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u06cc \u0627\u0634\u062a\u0628\u0627\u0647 \u0627\u0633\u062a!"
                                }
                              </div>
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"supportingText2"}
                        data-plasmic-override={overrides.supportingText2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.supportingText2
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"content3"}
                            data-plasmic-override={overrides.content3}
                            className={classNames(projectcss.all, sty.content3)}
                          />
                        ) : null}
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2608539"}
                    data-plasmic-override={overrides.frame2608539}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2608539)}
                  >
                    <div
                      data-plasmic-name={"content4"}
                      data-plasmic-override={overrides.content4}
                      className={classNames(projectcss.all, sty.content4)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"labelText4"}
                          data-plasmic-override={overrides.labelText4}
                          className={classNames(projectcss.all, sty.labelText4)}
                        />
                      ) : null}
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame2608528"}
                        data-plasmic-override={overrides.frame2608528}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame2608528)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <ProgressBarIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ier9R
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"labelText5"}
                            data-plasmic-override={overrides.labelText5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.labelText5
                            )}
                          >
                            {
                              "\u0647\u0646\u0648\u0632 \u06a9\u062f\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u06a9\u0631\u062f\u06cc\u061f"
                            }
                          </div>
                        ) : null}
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2608516"}
                      data-plasmic-override={overrides.frame2608516}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2608516)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"component12"}
                        data-plasmic-override={overrides.component12}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.component12)}
                      >
                        <div
                          data-plasmic-name={"stateLayer2"}
                          data-plasmic-override={overrides.stateLayer2}
                          className={classNames(
                            projectcss.all,
                            sty.stateLayer2
                          )}
                        >
                          <div
                            data-plasmic-name={"content5"}
                            data-plasmic-override={overrides.content5}
                            className={classNames(projectcss.all, sty.content5)}
                          >
                            <div
                              data-plasmic-name={"labelText6"}
                              data-plasmic-override={overrides.labelText6}
                              className={classNames(
                                projectcss.all,
                                sty.labelText6
                              )}
                            >
                              <div
                                data-plasmic-name={"labelText7"}
                                data-plasmic-override={overrides.labelText7}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.labelText7
                                )}
                              >
                                {"\u0627\u062f\u0627\u0645\u0647"}
                              </div>
                            </div>
                          </div>
                        </div>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xvq9U
                        )}
                      >
                        {
                          "\u0628\u0627 \u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u062a\u0648\u06cc \u0646\u0648\u062c\u0647\u0627\u0646 \u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a\u0634 \u0631\u0648 \u0642\u0628\u0648\u0644 \u0645\u06cc\u200c\u06a9\u0646\u06cc!"
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "signInUp",
    "signup1",
    "backgroundImage",
    "backgroundImage2",
    "layer1Image",
    "layer1Image2",
    "layer5Image",
    "layer5Image2",
    "layer6Image",
    "layer6Image2",
    "layer2Image",
    "layer2Image2",
    "layer15Image",
    "layer15Image2",
    "layer3Image",
    "layer3Image2",
    "layer8Image",
    "layer8Image2",
    "layer16Layer1CopyImage",
    "layer16Layer1CopyImage2",
    "layer10Image",
    "layer10Image2",
    "layer12Image",
    "layer12Image2",
    "layer17Image",
    "layer17Image2",
    "layer18Image",
    "layer18Image2",
    "layer9Image",
    "layer9Image2",
    "layer19Image",
    "layer19Image2",
    "frame1000002995",
    "vuesaxOutlineArrowDown",
    "vuesaxOutlineArrowDown2",
    "frame1000003191",
    "frame1000002994",
    "frame2608529",
    "frame2608540",
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517",
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3",
    "supportingText2",
    "content3",
    "frame2608539",
    "content4",
    "labelText4",
    "frame2608528",
    "labelText5",
    "frame2608516",
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  signInUp: [
    "signInUp",
    "signup1",
    "backgroundImage",
    "backgroundImage2",
    "layer1Image",
    "layer1Image2",
    "layer5Image",
    "layer5Image2",
    "layer6Image",
    "layer6Image2",
    "layer2Image",
    "layer2Image2",
    "layer15Image",
    "layer15Image2",
    "layer3Image",
    "layer3Image2",
    "layer8Image",
    "layer8Image2",
    "layer16Layer1CopyImage",
    "layer16Layer1CopyImage2",
    "layer10Image",
    "layer10Image2",
    "layer12Image",
    "layer12Image2",
    "layer17Image",
    "layer17Image2",
    "layer18Image",
    "layer18Image2",
    "layer9Image",
    "layer9Image2",
    "layer19Image",
    "layer19Image2",
    "frame1000002995",
    "vuesaxOutlineArrowDown",
    "vuesaxOutlineArrowDown2",
    "frame1000003191",
    "frame1000002994",
    "frame2608529",
    "frame2608540",
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517",
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3",
    "supportingText2",
    "content3",
    "frame2608539",
    "content4",
    "labelText4",
    "frame2608528",
    "labelText5",
    "frame2608516",
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  signup1: [
    "signup1",
    "backgroundImage",
    "backgroundImage2",
    "layer1Image",
    "layer1Image2",
    "layer5Image",
    "layer5Image2",
    "layer6Image",
    "layer6Image2",
    "layer2Image",
    "layer2Image2",
    "layer15Image",
    "layer15Image2",
    "layer3Image",
    "layer3Image2",
    "layer8Image",
    "layer8Image2",
    "layer16Layer1CopyImage",
    "layer16Layer1CopyImage2",
    "layer10Image",
    "layer10Image2",
    "layer12Image",
    "layer12Image2",
    "layer17Image",
    "layer17Image2",
    "layer18Image",
    "layer18Image2",
    "layer9Image",
    "layer9Image2",
    "layer19Image",
    "layer19Image2"
  ],
  backgroundImage: ["backgroundImage", "backgroundImage2"],
  backgroundImage2: ["backgroundImage2"],
  layer1Image: ["layer1Image", "layer1Image2"],
  layer1Image2: ["layer1Image2"],
  layer5Image: ["layer5Image", "layer5Image2"],
  layer5Image2: ["layer5Image2"],
  layer6Image: ["layer6Image", "layer6Image2"],
  layer6Image2: ["layer6Image2"],
  layer2Image: ["layer2Image", "layer2Image2"],
  layer2Image2: ["layer2Image2"],
  layer15Image: ["layer15Image", "layer15Image2"],
  layer15Image2: ["layer15Image2"],
  layer3Image: ["layer3Image", "layer3Image2"],
  layer3Image2: ["layer3Image2"],
  layer8Image: ["layer8Image", "layer8Image2"],
  layer8Image2: ["layer8Image2"],
  layer16Layer1CopyImage: ["layer16Layer1CopyImage", "layer16Layer1CopyImage2"],
  layer16Layer1CopyImage2: ["layer16Layer1CopyImage2"],
  layer10Image: ["layer10Image", "layer10Image2"],
  layer10Image2: ["layer10Image2"],
  layer12Image: ["layer12Image", "layer12Image2"],
  layer12Image2: ["layer12Image2"],
  layer17Image: ["layer17Image", "layer17Image2"],
  layer17Image2: ["layer17Image2"],
  layer18Image: ["layer18Image", "layer18Image2"],
  layer18Image2: ["layer18Image2"],
  layer9Image: ["layer9Image", "layer9Image2"],
  layer9Image2: ["layer9Image2"],
  layer19Image: ["layer19Image", "layer19Image2"],
  layer19Image2: ["layer19Image2"],
  frame1000002995: [
    "frame1000002995",
    "vuesaxOutlineArrowDown",
    "vuesaxOutlineArrowDown2"
  ],
  vuesaxOutlineArrowDown: ["vuesaxOutlineArrowDown", "vuesaxOutlineArrowDown2"],
  vuesaxOutlineArrowDown2: ["vuesaxOutlineArrowDown2"],
  frame1000003191: [
    "frame1000003191",
    "frame1000002994",
    "frame2608529",
    "frame2608540",
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517",
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3",
    "supportingText2",
    "content3",
    "frame2608539",
    "content4",
    "labelText4",
    "frame2608528",
    "labelText5",
    "frame2608516",
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  frame1000002994: [
    "frame1000002994",
    "frame2608529",
    "frame2608540",
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517",
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3",
    "supportingText2",
    "content3",
    "frame2608539",
    "content4",
    "labelText4",
    "frame2608528",
    "labelText5",
    "frame2608516",
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  frame2608529: [
    "frame2608529",
    "frame2608540",
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517",
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3",
    "supportingText2",
    "content3"
  ],
  frame2608540: [
    "frame2608540",
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517",
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3",
    "supportingText2",
    "content3"
  ],
  frame2608525: [
    "frame2608525",
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517"
  ],
  frame2608526: [
    "frame2608526",
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461",
    "frame2608517"
  ],
  frame2608522: [
    "frame2608522",
    "vuesaxOutlineArrowLeft",
    "vuesaxOutlineArrowLeft2",
    "frame2608520",
    "\u0646\u0648\u062c\u0647\u0627\u06461"
  ],
  vuesaxOutlineArrowLeft: ["vuesaxOutlineArrowLeft", "vuesaxOutlineArrowLeft2"],
  vuesaxOutlineArrowLeft2: ["vuesaxOutlineArrowLeft2"],
  frame2608520: ["frame2608520", "\u0646\u0648\u062c\u0647\u0627\u06461"],
  نوجهان1: ["\u0646\u0648\u062c\u0647\u0627\u06461"],
  frame2608517: ["frame2608517"],
  component11: [
    "component11",
    "textField",
    "stateLayer",
    "content",
    "labelText",
    "labelText2",
    "supportingText",
    "content2",
    "labelText3"
  ],
  textField: ["textField", "stateLayer", "content", "labelText", "labelText2"],
  stateLayer: ["stateLayer", "content", "labelText", "labelText2"],
  content: ["content", "labelText", "labelText2"],
  labelText: ["labelText", "labelText2"],
  labelText2: ["labelText2"],
  supportingText: ["supportingText", "content2", "labelText3"],
  content2: ["content2", "labelText3"],
  labelText3: ["labelText3"],
  supportingText2: ["supportingText2", "content3"],
  content3: ["content3"],
  frame2608539: [
    "frame2608539",
    "content4",
    "labelText4",
    "frame2608528",
    "labelText5",
    "frame2608516",
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  content4: ["content4", "labelText4", "frame2608528", "labelText5"],
  labelText4: ["labelText4"],
  frame2608528: ["frame2608528", "labelText5"],
  labelText5: ["labelText5"],
  frame2608516: [
    "frame2608516",
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  component12: [
    "component12",
    "stateLayer2",
    "content5",
    "labelText6",
    "labelText7"
  ],
  stateLayer2: ["stateLayer2", "content5", "labelText6", "labelText7"],
  content5: ["content5", "labelText6", "labelText7"],
  labelText6: ["labelText6", "labelText7"],
  labelText7: ["labelText7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  signInUp: "div";
  signup1: "div";
  backgroundImage: "div";
  backgroundImage2: "div";
  layer1Image: "div";
  layer1Image2: "div";
  layer5Image: "div";
  layer5Image2: "div";
  layer6Image: "div";
  layer6Image2: "div";
  layer2Image: "div";
  layer2Image2: "div";
  layer15Image: "div";
  layer15Image2: "div";
  layer3Image: "div";
  layer3Image2: "div";
  layer8Image: "div";
  layer8Image2: "div";
  layer16Layer1CopyImage: "div";
  layer16Layer1CopyImage2: "div";
  layer10Image: "div";
  layer10Image2: "div";
  layer12Image: "div";
  layer12Image2: "div";
  layer17Image: "div";
  layer17Image2: "div";
  layer18Image: "div";
  layer18Image2: "div";
  layer9Image: "div";
  layer9Image2: "div";
  layer19Image: "div";
  layer19Image2: "div";
  frame1000002995: "div";
  vuesaxOutlineArrowDown: "div";
  vuesaxOutlineArrowDown2: "div";
  frame1000003191: "div";
  frame1000002994: "div";
  frame2608529: "div";
  frame2608540: "div";
  frame2608525: "div";
  frame2608526: "div";
  frame2608522: "div";
  vuesaxOutlineArrowLeft: "div";
  vuesaxOutlineArrowLeft2: "div";
  frame2608520: "div";
  نوجهان1: "div";
  frame2608517: "div";
  component11: "div";
  textField: "div";
  stateLayer: "div";
  content: "div";
  labelText: "div";
  labelText2: "div";
  supportingText: "div";
  content2: "div";
  labelText3: "div";
  supportingText2: "div";
  content3: "div";
  frame2608539: "div";
  content4: "div";
  labelText4: "div";
  frame2608528: "div";
  labelText5: "div";
  frame2608516: "div";
  component12: "div";
  stateLayer2: "div";
  content5: "div";
  labelText6: "div";
  labelText7: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "5HTJZVUfUvhyzonuMvwKjB"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    signInUp: makeNodeComponent("signInUp"),
    signup1: makeNodeComponent("signup1"),
    backgroundImage: makeNodeComponent("backgroundImage"),
    backgroundImage2: makeNodeComponent("backgroundImage2"),
    layer1Image: makeNodeComponent("layer1Image"),
    layer1Image2: makeNodeComponent("layer1Image2"),
    layer5Image: makeNodeComponent("layer5Image"),
    layer5Image2: makeNodeComponent("layer5Image2"),
    layer6Image: makeNodeComponent("layer6Image"),
    layer6Image2: makeNodeComponent("layer6Image2"),
    layer2Image: makeNodeComponent("layer2Image"),
    layer2Image2: makeNodeComponent("layer2Image2"),
    layer15Image: makeNodeComponent("layer15Image"),
    layer15Image2: makeNodeComponent("layer15Image2"),
    layer3Image: makeNodeComponent("layer3Image"),
    layer3Image2: makeNodeComponent("layer3Image2"),
    layer8Image: makeNodeComponent("layer8Image"),
    layer8Image2: makeNodeComponent("layer8Image2"),
    layer16Layer1CopyImage: makeNodeComponent("layer16Layer1CopyImage"),
    layer16Layer1CopyImage2: makeNodeComponent("layer16Layer1CopyImage2"),
    layer10Image: makeNodeComponent("layer10Image"),
    layer10Image2: makeNodeComponent("layer10Image2"),
    layer12Image: makeNodeComponent("layer12Image"),
    layer12Image2: makeNodeComponent("layer12Image2"),
    layer17Image: makeNodeComponent("layer17Image"),
    layer17Image2: makeNodeComponent("layer17Image2"),
    layer18Image: makeNodeComponent("layer18Image"),
    layer18Image2: makeNodeComponent("layer18Image2"),
    layer9Image: makeNodeComponent("layer9Image"),
    layer9Image2: makeNodeComponent("layer9Image2"),
    layer19Image: makeNodeComponent("layer19Image"),
    layer19Image2: makeNodeComponent("layer19Image2"),
    frame1000002995: makeNodeComponent("frame1000002995"),
    vuesaxOutlineArrowDown: makeNodeComponent("vuesaxOutlineArrowDown"),
    vuesaxOutlineArrowDown2: makeNodeComponent("vuesaxOutlineArrowDown2"),
    frame1000003191: makeNodeComponent("frame1000003191"),
    frame1000002994: makeNodeComponent("frame1000002994"),
    frame2608529: makeNodeComponent("frame2608529"),
    frame2608540: makeNodeComponent("frame2608540"),
    frame2608525: makeNodeComponent("frame2608525"),
    frame2608526: makeNodeComponent("frame2608526"),
    frame2608522: makeNodeComponent("frame2608522"),
    vuesaxOutlineArrowLeft: makeNodeComponent("vuesaxOutlineArrowLeft"),
    vuesaxOutlineArrowLeft2: makeNodeComponent("vuesaxOutlineArrowLeft2"),
    frame2608520: makeNodeComponent("frame2608520"),
    نوجهان1: makeNodeComponent("\u0646\u0648\u062c\u0647\u0627\u06461"),
    frame2608517: makeNodeComponent("frame2608517"),
    component11: makeNodeComponent("component11"),
    textField: makeNodeComponent("textField"),
    stateLayer: makeNodeComponent("stateLayer"),
    content: makeNodeComponent("content"),
    labelText: makeNodeComponent("labelText"),
    labelText2: makeNodeComponent("labelText2"),
    supportingText: makeNodeComponent("supportingText"),
    content2: makeNodeComponent("content2"),
    labelText3: makeNodeComponent("labelText3"),
    supportingText2: makeNodeComponent("supportingText2"),
    content3: makeNodeComponent("content3"),
    frame2608539: makeNodeComponent("frame2608539"),
    content4: makeNodeComponent("content4"),
    labelText4: makeNodeComponent("labelText4"),
    frame2608528: makeNodeComponent("frame2608528"),
    labelText5: makeNodeComponent("labelText5"),
    frame2608516: makeNodeComponent("frame2608516"),
    component12: makeNodeComponent("component12"),
    stateLayer2: makeNodeComponent("stateLayer2"),
    content5: makeNodeComponent("content5"),
    labelText6: makeNodeComponent("labelText6"),
    labelText7: makeNodeComponent("labelText7"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
